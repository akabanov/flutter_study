// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_study_skeleton_app/test/unit/mockito_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;

import 'mockito_cat.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Cat].
///
/// See the documentation for Mockito's code generation for more information.
class MockCat extends _i1.Mock implements _i2.Cat {
  @override
  int get lives => (super.noSuchMethod(
        Invocation.getter(#lives),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set lives(int? _lives) => super.noSuchMethod(
        Invocation.setter(
          #lives,
          _lives,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool go(String? destination) => (super.noSuchMethod(
        Invocation.method(
          #go,
          [destination],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<bool> eat(
    String? food, {
    bool? hungry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #eat,
          [food],
          {#hungry: hungry},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<String> talk() => (super.noSuchMethod(
        Invocation.method(
          #talk,
          [],
        ),
        returnValue: _i3.Stream<String>.empty(),
        returnValueForMissingStub: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
}
